use std::collections::VecDeque;

pub fn q8() -> i64 {

    let string: String = "7316717653133062491922511967442657474235534919\
						49349698352031277450632623957831801698480186947\
						88518438586156078911294949545950173795833195285\
						32088055111254069874715852386305071569329096329\
						52274430435576689664895044524452316173185640309\
						87111217223831136222989342338030813533627661428\
						28064444866452387493035890729629049156044077239\
						07138105158593079608667017242712188399879790879\
						22749219016997208880937766572733300105336788122\
						02354218097512545405947522435258490771167055601\
						36048395864467063244157221553975369781797784617\
						40649551492908625693219784686224828397224137565\
						70560574902614079729686524145351004748216637048\
						44031998900088952434506585412275886668811642717\
						14799244429282308634656748139191231628245861786\
						64583591245665294765456828489128831426076900422\
						42190226710556263211111093705442175069416589604\
						08071984038509624554443629812309878799272442849\
						09188845801561660979191338754992005240636899125\
						60717606058861164671094050775410022569831552000\
						55935729725716362695618826704282524836008232575\
						30420752963450"
        .to_string();

    let mut nums: VecDeque<u8> = VecDeque::new();
    let mut curr_product: i64 = 1;
    let mut chars_iter = string.chars();

    for _ in 0..13 {
        let num: u8 = chars_iter.next().unwrap().to_digit(10).unwrap() as u8;
        nums.push_back(num);
        curr_product *= num as i64;
    }
    let mut max: i64 = curr_product;

    for c in chars_iter {

        nums.pop_front();
        nums.push_back(c.to_digit(10).unwrap() as u8);
        curr_product = {
            let mut temp: i64 = 1;
            for i in &nums {
                temp *= *i as i64;
            }
            temp
        };

        if curr_product > max {
            max = curr_product;
        }
    }

    return max;
}
